# Importing necessary libraries
from sklearn import datasets
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn import metrics
import matplotlib.pyplot as plt

# Loading the breast cancer dataset
cancer_data = datasets.load_breast_cancer()

# Displaying the data of the 5th sample
print("Data of the 5th sample:", cancer_data.data[5])


# Displaying the shape of the dataset
print("Shape of the dataset:", cancer_data.data.shape)

# Displaying the target set
print("Target set:", cancer_data.target)

# Splitting the dataset into training and testing sets
# Random state helps to reproduce the data
X_train, X_test, y_train, y_test = train_test_split(cancer_data.data, cancer_data.target, test_size=0.4, random_state=109)

# Creating a support vector classifier with linear kernel
cls = svm.SVC(kernel="linear")

# Training the model
cls.fit(X_train, y_train)

# Predicting the response
pred = cls.predict(X_test)

# Calculating accuracy
print("Accuracy:", metrics.accuracy_score(y_test, y_pred=pred))

# Calculating precision score
print("Precision:", metrics.precision_score(y_test, y_pred=pred))

# Calculating recall score
print("Recall:", metrics.recall_score(y_test, y_pred=pred))

# Printing classification report
print(metrics.classification_report(y_test, y_pred=pred))

# Loading the handwritten digits dataset
letters = datasets.load_digits()
# Generating the classifier
# gamma tells influence of  a single test example,low gamma = low variance = underfitting chances 
clf = svm.SVC(gamma=0.001, C=100)

# Training the classifier
X, y = letters.data[:-10], letters.target[:-10]
clf.fit(X, y)

# Predicting the output
print("Predictions:", clf.predict(letters.data[:-10]))

# Displaying the 6th handwritten digit
plt.imshow(letters.images[6], interpolation='nearest')
plt.show()
